filter(dep_delay_by_month, avg_dep_delay == max(avg_dep_delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
group_by(flights, dest) %>% summarise(avg_arr_delay = mean(arr_delay))
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
group_by(flights, dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-avg_arr_delay) %>%
head()
# You can look up these airports in the `airports` data frame!
airports
# You can look up these airports in the `airports` data frame!
filter(!!as.name('faa') %in% highest_avg_arr_delays)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
highest_avg_arr_delays <- group_by(flights, dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-avg_arr_delay) %>%
head()
# You can look up these airports in the `airports` data frame!
filter(!!as.name('faa') %in% highest_avg_arr_delays)
# You can look up these airports in the `airports` data frame!
filter(!!as.name('faa') %in% highest_avg_arr_delays$dest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
highest_avg_arr_delays <- group_by(flights, dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-avg_arr_delay) %>%
head()$dest
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
highest_avg_arr_delays <- group_by(flights, dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-avg_arr_delay) %>%
head() %>%
select(dest)
# You can look up these airports in the `airports` data frame!
filter(!!as.name('faa') %in% highest_avg_arr_delays)
# You can look up these airports in the `airports` data frame!
filter(!!as.name('faa') %in% as.vector(highest_avg_arr_delays))
# You can look up these airports in the `airports` data frame!
select(faa %in% highest_avg_arr_delays)
# You can look up these airports in the `airports` data frame!
select(airports, faa %in% highest_avg_arr_delays)
# You can look up these airports in the `airports` data frame!
filter(airports, !!as.name("faa") %in% highest_avg_arr_delays)
# Which city was flown to with the highest average speed?
airports
# Which city was flown to with the highest average speed?
mutate(flights, avg_speed = distance / (60 * hour + minute)) %>%
group_by(dest) %>%
summarize(avg_speed_avg = mean(avg_speed, na.rm = TRUE)) %>%
filter(avg_speed_avg == max(avg_speed_avg)) %>%
select(dest)
# You can look up these airports in the `airports` data frame!
select(airports, faa %in% highest_avg_arr_delays)
airports
View(airports)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
highest_avg_arr_delays <- group_by(flights, dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-avg_arr_delay) %>%
head() %>%
select(dest)
# You can look up these airports in the `airports` data frame!
select(airports, highest_avg_arr_delays %in% faa)
# You can look up these airports in the `airports` data frame!
select(airports, faa in highest_avg_arr_delays)
# You can look up these airports in the `airports` data frame!
select(airports, faa %in% highest_avg_arr_delays)
# You can look up these airports in the `airports` data frame!
select(airports, faa)# %in% highest_avg_arr_delays)
# You can look up these airports in the `airports` data frame!
filter(airports, !!as.name("faa") %in% highest_avg_arr_delays)
View(highest_avg_arr_delays)
View(highest_avg_arr_delays)
# You can look up these airports in the `airports` data frame!
filter(airports, !!as.name("faa") %in% highest_avg_arr_delays$dest)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
source('~/INFO201/class-exercise-assafvayner/chapter-11-exercises/exercise-6/exercise.R', echo=TRUE)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports)
?left_join
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = dest)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa"))
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa")) %>%
select(dest, avg_arr_delay == max(avg_arr_delay))
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa"))
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa")) %>%
select(dest, avg_arr_delay == max(avg_arr_delay))
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa")) %>%
select(avg_arr_delay == max(avg_arr_delay), dest)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa")) %>%
filter(avg_arr_delay == max(avg_arr_delay)) %>%
select(dest)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa")) %>%
filter(avg_arr_delay == max(avg_arr_delay))# %>%
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa")) %>%
colname()
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa")) %>%
colnames()
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa")) %>%
filter(avg_arr_delay == max(avg_arr_delay))# %>%
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa")) %>%
filter(max(avg_arr_delay))
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa")) %>%
filter(avg_arr_delay == max(avg_arr_delay))# %>%
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa")) %>%
filter(avg_arr_delay + 1 >= max(avg_arr_delay))# %>%
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa")) %>%
filter(avg_arr_delay == max(avg_arr_delay))# %>%
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa")) #%>%
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(avg_arr_delay == max(avg_arr_delay))# %>%
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
group_by(flights, dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa")) %>%
filter(avg_arr_delay == max(avg_arr_delay))# %>%
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
flights %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa")) %>%
filter(avg_arr_delay == max(avg_arr_delay))# %>%
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
flights %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = "faa") %>%
filter(avg_arr_delay == max(avg_arr_delay))# %>%
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
flights %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_arr_delay == max(avg_arr_delay, na.rm = TRUE)) %>%
select(name)
airports
airline
airlines
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
flights %>%
group_by(airline) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(name = airline) %>%
left_join(airlines, by = "name") %>%
filter(avg_arr_delay == max(avg_arr_delay, na.rm = TRUE)) %>%
select(name)
flights
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
flights %>%
group_by(carrier) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier") %>%
filter(avg_arr_delay == max(avg_arr_delay, na.rm = TRUE)) %>%
select(name)
install.packages("rmarkdown ")
install.packages("rmarkdown")
install.packages("knitr")
source('~/INFO201/class-exercise-assafvayner/chapter-18-exercises/exercise-1/exercise.R', echo=TRUE)
library(ggplot2)
?ggplot2
mpg
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point()
?ggplot
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(dplyr)
library(ggplot2)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
colnames(diamonds)
rownames(diamonds)
View(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(diamonds)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(diamonds_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(diamonds_sample)
?aes
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(diamonds_sample,
mapping=aes(carat, price))
?ggplot
?aes
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
geom_point(mapping=aes(carat, price), data = diamonds_sample)
?geom_point
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
?aes
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = '0000FF'))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = "blue"))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = '0000FF'))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = '0000FF'))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = blue))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = "blue"))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = "#0000FF"))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = "blue"))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = 'blue'))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = 'darkblue'))
install.packages("plottly")
install.packages("plotly")
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds_sample, mapping = aes(color = 'blue')) +
geom_point(mapping = aes(x = carat, y = price))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(diamonds_sample) +
geom_bar(mapping = aes(x = cut, y = price))
rlang::last_error()
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(diamonds_sample) +
geom_bar(mapping = aes(x = cut, y = price))
?geom_bar
# Draw the same chart again, but with each element positioned to "dodge" each other
ggplot(diamonds, mapping = aes(x = cut, y = price, fill = clarity)) +
geom_bar(stat = "identity", position_dodge())
# Draw the same chart again, but with each element positioned to "dodge" each other
ggplot(diamonds, mapping = aes(x = cut, y = price, fill = clarity)) +
geom_bar(stat = "identity", position = "dodge")
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
###### Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(diamonds, mapping = aes(x = cut, y = price, fill = clarity)) +
geom_bar(stat = "identity")
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(diamonds, mapping = aes(x = cut, y = price, fill = clarity)) +
geom_bar(stat = "identity")
# Draw the same chart again, but with each element positioned to "dodge" each other
ggplot(diamonds, mapping = aes(x = cut, y = price, fill = clarity)) +
geom_bar(stat = "identity") +
position_dodge()
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(diamonds, mapping = aes(x = cut, y = price, fill = clarity)) +
geom_bar(stat = "identity", fill = "y")
# Draw the same chart again, but with each element positioned to "dodge" each other
ggplot(diamonds, mapping = aes(x = cut, y = price, fill = clarity)) +
geom_bar(stat = "identity", position = position_dodge())
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(diamonds, mapping = aes(x = cut, y = price, fill = clarity)) +
geom_bar(stat = "identity")
install.packages("rgl")
options(rgl.printRglwidget = TRUE)
shiny::runApp('INFO201/assignments/a6-shiny-assafvayner')
setwd("~/INFO201/final-project-assafvayner")
library(lintr)
lint_dir()
lint_dir()
lint_dir()
lint_dir()
?source
?attach
?load_all
lint_dir()
shiny::runApp()
?import
?importfrom
?importFrom
?importIntoEnv
runApp()
?importIntoEnv
runApp()
lint_dir()
runApp()
lint_dir()
runApp()
runApp()
runApp()
runApp()
lint_dir()
source("app_ui.R")
lint_dir()
